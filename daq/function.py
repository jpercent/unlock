from core.acquisition import UnlockAcquisition
#import numpy as np
import time


class FunctionDAQ(UnlockAcquisition):
    """ A function-based virtual hardware device. This is primarily for
    simulating online data presentation from a data stream generated by a
    supplied function.
    """
    def __init__(self, function, channels, frequency, time=1, t=0, dt=0.1):
        super(FunctionDAQ, self).__init__(None, channels, frequency)

        self._function = function
        self._time = time
        self._t = t
        self._dt = 1.0/frequency if frequency > 0 else dt
        self._samples = None
        self._running = False

    def open(self, *args):
        return True

    def init(self, *args):
        self._samples = None
        return True

    def start(self):
        self._running = True
        return self._running

    def stop(self):
        self._running = False
        return True

    def close(self):
        return True

    def acquire(self):
        if self._t >= self._time:
            return False

        self._samples = self._function(self._t)
        self._t += self._dt
        if self.frequency > 0:
            time.sleep(1.0/self.frequency)
        return True

    def getdata(self):
        return self._samples.reshape((1, self.channels))
